const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const { v4: uuidv4 } = require('uuid');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const app = express();
const PORT = process.env.PORT || 3001;
const SERVER_URL = process.env.SERVER_URL || `http://localhost:${PORT}`;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
const BILLING_CONSTANTS = {
  FREE_STORAGE_MB: 3 * 1024, // 3 –ì–ë –≤ –ú–ë
  PRICE_PER_MB: 0.1, // 0.1 —Ä—É–±–ª—å –∑–∞ –ú–ë
  MAX_FILE_SIZE_MB: 100 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
const decodeFileName = (filename) => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8
    return decodeURIComponent(filename);
  } catch (e) {
    try {
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑ latin1 –≤ UTF-8
      const buffer = Buffer.from(filename, 'latin1');
      return buffer.toString('utf8');
    } catch (e2) {
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      return filename;
    }
  }
};

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
const uploadsDir = path.join(__dirname, 'uploads');
const usersDir = path.join(__dirname, 'data');

if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
}
if (!fs.existsSync(usersDir)) {
  fs.mkdirSync(usersDir, { recursive: true });
}

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ CORP –ø—Ä–æ–≤–µ—Ä–∫–∏
app.use(
  helmet({
    crossOriginResourcePolicy: false,
    contentSecurityPolicy: false
  })
);
app.use(morgan('combined'));
app.use(cors({
  origin: ['http://localhost:3000', 'http://92.51.38.132:3001', 'http://92.51.38.132'], // Allow production and dev URLs
  credentials: true
}));
// Static files for uploads
app.use('/uploads', express.static(uploadsDir));

// Serve static files from the React build directory
const buildPath = path.join(__dirname, '../build');
app.use(express.static(buildPath));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Middleware –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ multipart –¥–∞–Ω–Ω—ã—Ö
app.use((req, res, next) => {
  if (req.headers['content-type'] && req.headers['content-type'].includes('multipart/form-data')) {
    req.setEncoding('latin1');
  }
  next();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const userId = req.user?.id || 'anonymous';
    const userUploadDir = path.join(uploadsDir, userId);
    
    if (!fs.existsSync(userUploadDir)) {
      fs.mkdirSync(userUploadDir, { recursive: true });
    }
    
    cb(null, userUploadDir);
  },
  filename: (req, file, cb) => {
    const decodedName = decodeFileName(file.originalname);
    const uniqueName = `${uuidv4()}-${decodedName}`;
    cb(null, uniqueName);
  }
});

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 100 * 1024 * 1024 // 100MB limit
  },
  fileFilter: (req, file, cb) => {
    // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–µ–º–æ
    cb(null, true);
  }
});

// In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
let users = [];
let files = [];

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
const loadData = () => {
  try {
    const usersFile = path.join(usersDir, 'users.json');
    const filesFile = path.join(usersDir, 'files.json');
    
    if (fs.existsSync(usersFile)) {
      users = JSON.parse(fs.readFileSync(usersFile, 'utf8'));
    }
    
    if (fs.existsSync(filesFile)) {
      files = JSON.parse(fs.readFileSync(filesFile, 'utf8'));
    }
    
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ ${files.length} —Ñ–∞–π–ª–æ–≤`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
};

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
const saveData = () => {
  try {
    const usersFile = path.join(usersDir, 'users.json');
    const filesFile = path.join(usersDir, 'files.json');
    
    fs.writeFileSync(usersFile, JSON.stringify(users, null, 2));
    fs.writeFileSync(filesFile, JSON.stringify(files, null, 2));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
  }
};

// –§—É–Ω–∫—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
const calculateUserStorage = (userId) => {
  const userFiles = files.filter(f => f.userId === userId);
  const totalSizeBytes = userFiles.reduce((sum, file) => sum + (file.size || 0), 0);
  const totalSizeMB = totalSizeBytes / (1024 * 1024);
  
  return {
    usedMB: Math.round(totalSizeMB * 100) / 100,
    freeMB: BILLING_CONSTANTS.FREE_STORAGE_MB,
    totalMB: totalSizeMB,
    isOverLimit: totalSizeMB > BILLING_CONSTANTS.FREE_STORAGE_MB
  };
};

const calculateBilling = (userId) => {
  const storage = calculateUserStorage(userId);
  const overLimitMB = Math.max(0, storage.totalMB - BILLING_CONSTANTS.FREE_STORAGE_MB);
  const cost = overLimitMB * BILLING_CONSTANTS.PRICE_PER_MB;
  
  return {
    ...storage,
    overLimitMB: Math.round(overLimitMB * 100) / 100,
    cost: Math.round(cost * 100) / 100,
    canUpload: storage.totalMB < BILLING_CONSTANTS.FREE_STORAGE_MB + (BILLING_CONSTANTS.MAX_FILE_SIZE_MB * 2) // –ë—É—Ñ–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  };
};

const formatBytes = (bytes) => {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞
const authenticateApiKey = (req, res, next) => {
  // –ü–æ–ª—É—á–∞–µ–º apiKey –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ –∏–∑ query –¥–ª—è iframe
  const authHeader = req.headers.authorization;
  let apiKey = req.query.apiKey;
  if (authHeader && authHeader.startsWith('Bearer ')) {
    apiKey = authHeader.substring(7);
  }
  if (!apiKey) {
    return res.status(401).json({ 
      error: 'API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
      message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Bearer –∏–ª–∏ query –ø–∞—Ä–∞–º–µ—Ç—Ä apiKey'
    });
  }
  
  // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ API –∫–ª—é—á—É
  const user = users.find(u => u.apiKey === apiKey);
  
  if (!user) {
    return res.status(401).json({ 
      error: '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á',
      message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞'
    });
  }
  
  req.user = user;
  next();
};

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π API –∫–ª—é—á
const generateApiKey = (userId) => {
  // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–ª—é—á: WDX + 8 —Å–∏–º–≤–æ–ª–æ–≤
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = 'WDX_';
  
  // –î–æ–±–∞–≤–ª—è–µ–º 8 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  for (let i = 0; i < 8; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  
  return result;
};

// Routes

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'Windexs Cloud API Server —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    timestamp: new Date().toISOString(),
    users: users.length,
    files: files.length
  });
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/register', async (req, res) => {
  try {
    const { name, email, password } = req.body;
    
    if (!name || !email || !password) {
      return res.status(400).json({ 
        error: '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã',
        required: ['name', 'email', 'password']
      });
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º email (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã)
    const normalizedEmail = email.trim().toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = users.find(u => u.email.toLowerCase() === normalizedEmail);
    if (existingUser) {
      return res.status(409).json({ 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = uuidv4();
    const hashedPassword = await bcrypt.hash(password, 10);
    const apiKey = generateApiKey(userId);
    
    const newUser = {
      id: userId,
      name,
      email: normalizedEmail,
      password: hashedPassword,
      apiKey,
      balance: 0, // –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
    
    users.push(newUser);
    saveData();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–∞—Ä–æ–ª—è
    const { password: _, ...userResponse } = newUser;
    
    res.status(201).json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
      user: userResponse
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    if (!email || !password) {
      return res.status(400).json({ 
        error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º email (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã)
    const normalizedEmail = email.trim().toLowerCase();

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = users.find(u => u.email.toLowerCase() === normalizedEmail);
    if (!user) {
      return res.status(401).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isValidPassword = await bcrypt.compare(password, user.password);
    if (!isValidPassword) {
      return res.status(401).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º API –∫–ª—é—á –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—Ö–æ–¥–µ
    user.apiKey = generateApiKey(user.id);
    user.updatedAt = new Date().toISOString();
    saveData();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–∞—Ä–æ–ª—è
    const { password: _, ...userResponse } = user;
    
    res.json({
      success: true,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
      user: userResponse
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ API-–∫–ª—é—á–∞ –ø–æ email –∏ –ø–∞—Ä–æ–ª—é
app.post('/api/key', async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) {
      return res.status(400).json({ success: false, error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º email
    const normalizedEmail = email.trim().toLowerCase();
    const user = users.find(u => u.email.toLowerCase() === normalizedEmail);
    if (!user) {
      return res.status(401).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }
    const isValid = await bcrypt.compare(password, user.password);
    if (!isValid) {
      return res.status(401).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }
    res.json({ success: true, apiKey: user.apiKey });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API-–∫–ª—é—á–∞:', error);
    res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
app.get('/api/user', authenticateApiKey, (req, res) => {
  const { password: _, ...userResponse } = req.user;
  res.json({
    success: true,
    user: userResponse // –≤–∫–ª—é—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å
  });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put('/api/user', authenticateApiKey, (req, res) => {
  try {
    const userId = req.user.id;
    const { name, email } = req.body;
    if (!name || !email) {
      return res.status(400).json({ success: false, error: '–ò–º—è –∏ email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }
    const user = users.find(u => u.id === userId);
    if (!user) return res.status(404).json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    user.name = name;
    user.email = email;
    saveData();
    const { password: _, ...userResp } = user;
    res.json({ success: true, user: userResp });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', err);
    res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
app.put('/api/user/password', authenticateApiKey, async (req, res) => {
  try {
    const userId = req.user.id;
    const { currentPassword, newPassword } = req.body;
    if (!currentPassword || !newPassword) {
      return res.status(400).json({ success: false, error: '–¢–µ–∫—É—â–∏–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }
    const user = users.find(u => u.id === userId);
    if (!user) return res.status(404).json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    const match = await bcrypt.compare(currentPassword, user.password);
    if (!match) return res.status(400).json({ success: false, error: '–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω' });
    const hash = await bcrypt.hash(newPassword, 10);
    user.password = hash;
    saveData();
    res.json({ success: true, message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', err);
    res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.get('/api/billing', authenticateApiKey, (req, res) => {
  try {
    const userId = req.user.id;
    const billing = calculateBilling(userId);
    
    res.json({
      success: true,
      billing: {
        ...billing,
        usedFormatted: formatBytes(billing.usedMB * 1024 * 1024),
        freeFormatted: formatBytes(billing.freeMB * 1024 * 1024),
        totalFormatted: formatBytes(billing.totalMB * 1024 * 1024),
        overLimitFormatted: formatBytes(billing.overLimitMB * 1024 * 1024),
        pricePerMB: BILLING_CONSTANTS.PRICE_PER_MB,
        freeStorageMB: BILLING_CONSTANTS.FREE_STORAGE_MB
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
app.get('/api/files', authenticateApiKey, (req, res) => {
  try {
    const { path: filePath } = req.query;
    const userId = req.user.id;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø—É—Ç–∏
    let userFiles = files.filter(f => f.userId === userId);
    
    if (filePath) {
      userFiles = userFiles.filter(f => f.path.startsWith(filePath));
    }
    
    res.json({
      success: true,
      files: userFiles,
      count: userFiles.length
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
app.post('/api/upload', authenticateApiKey, upload.single('file'), (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const { path: uploadPath = '/' } = req.body;
    const userId = req.user.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
    const billing = calculateBilling(userId);
    const fileSizeMB = req.file.size / (1024 * 1024);
    
    if (fileSizeMB > BILLING_CONSTANTS.MAX_FILE_SIZE_MB) {
      return res.status(400).json({ 
        error: `–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π (${BILLING_CONSTANTS.MAX_FILE_SIZE_MB} –ú–ë)`,
        maxFileSize: BILLING_CONSTANTS.MAX_FILE_SIZE_MB
      });
    }
    
    if (billing.totalMB + fileSizeMB > BILLING_CONSTANTS.FREE_STORAGE_MB + (BILLING_CONSTANTS.MAX_FILE_SIZE_MB * 2)) {
      return res.status(400).json({ 
        error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞. –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ.',
        billing: billing,
        fileSizeMB: Math.round(fileSizeMB * 100) / 100
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–∞–π–ª–µ
    const decodedFileName = decodeFileName(req.file.originalname);
    const fileRecord = {
      id: uuidv4(),
      userId,
      name: decodedFileName,
      type: 'file',
      size: req.file.size,
      path: path.posix.join(uploadPath, decodedFileName),
      filename: req.file.filename, // –ò–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ
      mimeType: req.file.mimetype,
      createdAt: new Date().toISOString(),
      modifiedAt: new Date().toISOString()
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º URL –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (fileRecord.mimeType.startsWith('image/')) {
      fileRecord.previewUrl = `${SERVER_URL}/uploads/${userId}/${fileRecord.filename}`;
    }

    files.push(fileRecord);
    saveData();
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const updatedBilling = calculateBilling(userId);
    
    res.status(201).json({
      success: true,
      message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
      file: fileRecord,
      billing: updatedBilling
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏
app.post('/api/folders', authenticateApiKey, (req, res) => {
  try {
    const { name, path: folderPath = '/' } = req.body;
    const userId = req.user.id;
    
    if (!name) {
      return res.status(400).json({ error: '–ò–º—è –ø–∞–ø–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }
    
    const fullPath = path.posix.join(folderPath, name);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–∞–ø–∫–∞
    const existingFolder = files.find(f => 
      f.userId === userId && 
      f.type === 'folder' && 
      f.path === fullPath
    );
    
    if (existingFolder) {
      return res.status(409).json({ error: '–ü–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
    const folderRecord = {
      id: uuidv4(),
      userId,
      name,
      type: 'folder',
      path: fullPath,
      createdAt: new Date().toISOString(),
      modifiedAt: new Date().toISOString()
    };
    
    files.push(folderRecord);
    saveData();
    
    res.status(201).json({
      success: true,
      message: '–ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
      folder: folderRecord
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
app.get('/api/files/:fileId', authenticateApiKey, (req, res) => {
  try {
    const { fileId } = req.params;
    const userId = req.user.id;
    
    const file = files.find(f => f.id === fileId && f.userId === userId);
    
    if (!file) {
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json({
      success: true,
      file
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏
app.put('/api/files/:fileId', authenticateApiKey, (req, res) => {
  try {
    const { fileId } = req.params;
    const { name } = req.body;
    const userId = req.user.id;
    
    if (!name) {
      return res.status(400).json({ error: '–ù–æ–≤–æ–µ –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }
    
    const file = files.find(f => f.id === fileId && f.userId === userId);
    
    if (!file) {
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∏ –ø—É—Ç—å
    const oldPath = file.path;
    const newPath = path.posix.join(path.posix.dirname(oldPath), name);
    
    file.name = name;
    file.path = newPath;
    file.modifiedAt = new Date().toISOString();
    
    saveData();
    
    res.json({
      success: true,
      message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω',
      file
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏
app.delete('/api/files/:fileId', authenticateApiKey, (req, res) => {
  try {
    const { fileId } = req.params;
    const userId = req.user.id;
    
    const fileIndex = files.findIndex(f => f.id === fileId && f.userId === userId);
    
    if (fileIndex === -1) {
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const file = files[fileIndex];
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª, —É–¥–∞–ª—è–µ–º –µ–≥–æ —Å –¥–∏—Å–∫–∞
    if (file.type === 'file' && file.filename) {
      const filePath = path.join(uploadsDir, userId, file.filename);
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –º–∞—Å—Å–∏–≤–∞
    files.splice(fileIndex, 1);
    saveData();
    
    res.json({
      success: true,
      message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
app.get('/api/search', authenticateApiKey, (req, res) => {
  try {
    const { q: query, type } = req.query;
    const userId = req.user.id;
    
    if (!query) {
      return res.status(400).json({ error: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }
    
    let userFiles = files.filter(f => f.userId === userId);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (type) {
      userFiles = userFiles.filter(f => f.type === type);
    }
    
    // –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏
    const searchResults = userFiles.filter(f => 
      f.name.toLowerCase().includes(query.toLowerCase())
    );
    
    res.json({
      success: true,
      query,
      results: searchResults,
      count: searchResults.length
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
app.get('/api/download/:fileId', authenticateApiKey, (req, res) => {
  try {
    const { fileId } = req.params;
    const userId = req.user.id;
    
    const file = files.find(f => f.id === fileId && f.userId === userId);
    
    if (!file || file.type !== 'file') {
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const filePath = path.join(uploadsDir, userId, file.filename);
    
    if (!fs.existsSync(filePath)) {
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ' });
    }
    
    res.download(filePath, file.name);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ API –∫–ª—é—á—É
app.get('/api/files/:fileId/image', async (req, res) => {
  // –†–∞–∑—Ä–µ—à–∞–µ–º –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω–æ–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ - —É–¥–∞–ª—è–µ–º CORP –∑–∞–≥–æ–ª–æ–≤–æ–∫, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π helmet
  res.removeHeader('Cross-Origin-Resource-Policy');
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Cross-Origin-Resource-Policy', 'cross-origin');
  try {
    const apiKey = req.query.apiKey;
    if (!apiKey) {
      return res.status(401).send('API key required');
    }
    const user = users.find(u => u.apiKey === apiKey);
    if (!user) {
      return res.status(401).send('Invalid API key');
    }
    const fileId = req.params.fileId;
    const file = files.find(f => f.id === fileId && f.userId === user.id);
    if (!file || file.type !== 'file' || !file.filename) {
      return res.status(404).send('File not found');
    }
    const userDir = path.join(uploadsDir, user.id);
    const filePath = path.join(userDir, file.filename);
    if (!fs.existsSync(filePath)) {
      return res.status(404).send('File not found on disk');
    }
    res.sendFile(filePath);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–¥–∞—á–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    res.status(500).send('Server error');
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—ã—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
app.get('/api/files/:fileId/raw', authenticateApiKey, (req, res) => {
  // –†–∞–∑—Ä–µ—à–∞–µ–º –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω–æ–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ - —É–¥–∞–ª—è–µ–º CORP –∑–∞–≥–æ–ª–æ–≤–æ–∫
  res.removeHeader('Cross-Origin-Resource-Policy');
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Cross-Origin-Resource-Policy', 'cross-origin');
  try {
    const userId = req.user.id;
    const fileId = req.params.fileId;
    const file = files.find(f => f.id === fileId && f.userId === userId);
    if (!file) return res.status(404).json({ success:false, error:'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    if (file.type !== 'file' || !file.filename) {
      return res.status(400).json({ success:false, error:'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞' });
    }
    const filePath = path.join(uploadsDir, userId, file.filename);
    if (!fs.existsSync(filePath)) {
      return res.status(404).json({ success:false, error:'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ' });
    }
    res.setHeader('Content-Type', file.mimeType);
    res.sendFile(filePath);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–¥–∞—á–∏ —Å—ã—Ä–æ–≥–æ —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ success:false, error:'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put('/api/user/balance', authenticateApiKey, (req, res) => {
  try {
    const userId = req.user.id;
    const { amount } = req.body;
    if (typeof amount !== 'number' || amount <= 0) {
      return res.status(400).json({ success: false, error: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º' });
    }
    const user = users.find(u => u.id === userId);
    if (!user) return res.status(404).json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    user.balance = (user.balance || 0) + amount;
    user.updatedAt = new Date().toISOString();
    saveData();
    res.json({ success: true, balance: user.balance });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', err);
    res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ò—Å—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ)
app.get('/api/billing/history', authenticateApiKey, (req, res) => {
  try {
    const userId = req.user.id;
    const userFiles = files.filter(f => f.userId === userId && f.type === 'file');
    const historyMap = {};
    userFiles.forEach(f => {
      const dateKey = new Date(f.createdAt).toLocaleDateString('ru-RU');
      const mb = (f.size || 0) / (1024 * 1024);
      historyMap[dateKey] = (historyMap[dateKey] || 0) + mb;
    });
    const history = Object.entries(historyMap).map(([date, used]) => ({ date, usedMB: Math.round(used * 100) / 100 }));
    res.json({ success: true, history });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', err);
    res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);

  if (error instanceof multer.MulterError) {
    if (error.code === 'LIMIT_FILE_SIZE') {
      return res.status(413).json({ error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 100MB)' });
    }
  }

  res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
loadData();

// –ï–¥–∏–Ω—ã–π catch-all handler –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res) => {
  // –ï—Å–ª–∏ —ç—Ç–æ API –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –æ—à–∏–±–∫—É 404
  if (req.path.startsWith('/api/')) {
    return res.status(404).json({
      error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
      message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –∏ –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞',
      availableEndpoints: [
        'GET /health',
        'POST /api/register',
        'POST /api/login',
        'GET /api/user',
        'GET /api/files',
        'POST /api/upload',
        'POST /api/folders',
        'GET /api/files/:fileId',
        'PUT /api/files/:fileId',
        'DELETE /api/files/:fileId',
        'GET /api/search',
        'GET /api/download/:fileId'
      ]
    });
  }

  // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ React —Ä–æ—É—Ç—ã) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º index.html
  res.sendFile(path.join(buildPath, 'index.html'), (err) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ index.html:', err);
      res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
  });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(PORT, '0.0.0.0', () => {
  console.log('üöÄ Windexs Cloud API Server –∑–∞–ø—É—â–µ–Ω!');
  console.log(`üì° –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê URL: http://localhost:${PORT}`);
  console.log(`üíö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: http://localhost:${PORT}/health`);
  console.log(`üìÅ –ó–∞–≥—Ä—É–∑–∫–∏: ${uploadsDir}`);
  console.log(`üíæ –î–∞–Ω–Ω—ã–µ: ${usersDir}`);
  console.log('üîë API –∫–ª—é—á–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–µ');
  console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫: Authorization: Bearer YOUR_API_KEY');
});

module.exports = app;
